name: Deploy

on:
  workflow_dispatch:
    inputs:
      deployment-environment:
        description: "Deployment environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - test
  push:
    branches:
      - main
    paths-ignore:
      - ".github/**"
      - ".gitignore"

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-publish-image:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.output-image-digest.outputs.image-digest}}
      image-version: ${{ steps.output-image-version.outputs.image-version}}
    steps:
      - name: Set imagetag as env variable
        run: echo "IMAGE_TAG=$(date +'%Y-%m-%d-%H%M')-${GITHUB_SHA::8}" >> "$GITHUB_ENV"
      - name: Set IMAGE_NAME env variable
        run: echo "IMAGE_NAME=${{ secrets.REGISTRY_URL }}/einnsyn-frontend-next" >> "$GITHUB_ENV"
      - name: checkout
        uses: actions/checkout@v4.2.2
      - name: Build image
        run: docker build -t "${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}" .
      - name: "Login docker container registry"
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: "Push image"
        run: docker push ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
      - name: Extract image digest
        run: |
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} | cut -d '@' -f 2)
          echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> "$GITHUB_ENV"
      - id: output-image-version
        run: echo "image-version=${{env.IMAGE_TAG}}" >> "$GITHUB_OUTPUT"
      - id: output-image-digest
        run: echo "image-digest=${{env.IMAGE_DIGEST}}" >> "$GITHUB_OUTPUT"

  update-image:
    uses: felleslosninger/github-workflows/.github/workflows/ci-call-update-image.yml@main
    needs: build-publish-image
    with:
      application-name: einnsyn-frontend-next
      deployment-environment: ${{ inputs.deployment-environment || 'test' }}
      image-digest: ${{ needs.build-publish-image.outputs.image-digest }}
      image-name: einnsyn-frontend-next
      image-version: ${{ needs.build-publish-image.outputs.image-version }}
      kubernetes-repo: einnsyn-cd
      product-name: einnsyn
    secrets: inherit

  count-dev-labels:
    runs-on: ubuntu-latest
    needs: [ update-image ]
    if: ${{ inputs.deployment-environment == 'test' || inputs.deployment-environment == null }}
    outputs:
      dev_pr_count: ${{ steps.count_prs.outputs.DEV_PR_COUNT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Count PRs with "dev" label to main
        id: count_prs
        run: |
          DEV_PR_COUNT=$(gh pr list --base main --label "dev" --json number --jq ". | length")
          echo "DEV_PR_COUNT=$DEV_PR_COUNT" >> $GITHUB_OUTPUT

  update-dev-image:
    uses: felleslosninger/github-workflows/.github/workflows/ci-call-update-image.yml@main
    needs: [count-dev-labels, build-publish-image]
    if: needs.count-dev-labels.outputs.dev_pr_count == 0
    with:
      application-name: einnsyn-frontend-next
      deployment-environment: "dev"
      image-digest: ${{ needs.build-publish-image.outputs.image-digest }}
      image-name: einnsyn-frontend-next
      image-version: ${{ needs.build-publish-image.outputs.image-version }}
      kubernetes-repo: einnsyn-cd
      product-name: einnsyn
    secrets: inherit

  update-pr-labels:
    runs-on: ubuntu-latest
    needs: [ update-image ]
    env:
      DEPLOYMENT_ENV: ${{ github.event.inputs.deployment-environment || 'test' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Remove label from other PRs
        run: |
          OLD_PR_NUMBERS=$(gh pr list --label "$DEPLOYMENT_ENV" --json number --jq ".[] | .number" || echo "")
          for PR in $OLD_PR_NUMBERS; do
            if [[ -n "$PR" ]]; then
              gh pr edit "$PR" --remove-label "$DEPLOYMENT_ENV" || echo "Failed to remove label from PR $PR"
            fi
          done

      - name: Add label to current PR
        run: |
          PR_NUMBER=$(gh pr list --search "${{ github.sha }}" --json number --jq '.[0].number' || echo "")
          if [[ -n "$PR_NUMBER" && "$PR_NUMBER" != "null" ]]; then
            gh pr edit "$PR_NUMBER" --add-label "$DEPLOYMENT_ENV" || echo "Failed to add label to PR $PR_NUMBER"
          else
            echo "Could not find a PR associated with commit ${{ github.sha }}."
          fi
